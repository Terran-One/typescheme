// Generated from ./grammar/TypeSchemeLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TypeSchemeLexer extends Lexer {
	public static readonly BooleanLiteral = 1;
	public static readonly StringLiteral = 2;
	public static readonly SingleQuotedStringLiteral = 3;
	public static readonly DoubleQuotedStringLiteral = 4;
	public static readonly BacktickStringLiteral = 5;
	public static readonly EscapeSequence = 6;
	public static readonly UnicodeEscapeSequence = 7;
	public static readonly NumberLiteral = 8;
	public static readonly HexLiteral = 9;
	public static readonly OctalLiteral = 10;
	public static readonly BinaryLiteral = 11;
	public static readonly DecimalLiteral = 12;
	public static readonly LPAREN = 13;
	public static readonly RPAREN = 14;
	public static readonly LBRACE = 15;
	public static readonly RBRACE = 16;
	public static readonly LBRACK = 17;
	public static readonly RBRACK = 18;
	public static readonly LANGL = 19;
	public static readonly RANGL = 20;
	public static readonly COLON = 21;
	public static readonly COMMA = 22;
	public static readonly AMP = 23;
	public static readonly QUESTION = 24;
	public static readonly BAR = 25;
	public static readonly SPREAD = 26;
	public static readonly DOT = 27;
	public static readonly QUOTE = 28;
	public static readonly WS = 29;
	public static readonly KEYOF = 30;
	public static readonly INFER = 31;
	public static readonly IN = 32;
	public static readonly AS = 33;
	public static readonly EXTENDS = 34;
	public static readonly EXTENDS_Q = 35;
	public static readonly IN_Q = 36;
	public static readonly IF = 37;
	public static readonly NEVER = 38;
	public static readonly NULL = 39;
	public static readonly UNDEFINED = 40;
	public static readonly UNKNOWN = 41;
	public static readonly OBJECT = 42;
	public static readonly ANY = 43;
	public static readonly STRING = 44;
	public static readonly NUMBER = 45;
	public static readonly BOOLEAN = 46;
	public static readonly Identifier = 47;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"BooleanLiteral", "StringLiteral", "SingleQuotedStringLiteral", "DoubleQuotedStringLiteral", 
		"BacktickStringLiteral", "EscapeSequence", "UnicodeEscapeSequence", "NumberLiteral", 
		"HexLiteral", "OctalLiteral", "BinaryLiteral", "DecimalLiteral", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "LANGL", "RANGL", "COLON", 
		"COMMA", "AMP", "QUESTION", "BAR", "SPREAD", "DOT", "QUOTE", "WS", "KEYOF", 
		"INFER", "IN", "AS", "EXTENDS", "EXTENDS_Q", "IN_Q", "IF", "NEVER", "NULL", 
		"UNDEFINED", "UNKNOWN", "OBJECT", "ANY", "STRING", "NUMBER", "BOOLEAN", 
		"Identifier",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'<'", "'>'", "':'", "','", "'&'", 
		"'?'", "'|'", "'...'", "'.'", "'''", undefined, "'keyof'", "'infer'", 
		"'in'", "'as'", "'extends'", "'extends?'", "'in?'", "'if'", "'never'", 
		"'null'", "'undefined'", "'unknown'", "'object'", "'any'", "'string'", 
		"'number'", "'boolean'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "BooleanLiteral", "StringLiteral", "SingleQuotedStringLiteral", 
		"DoubleQuotedStringLiteral", "BacktickStringLiteral", "EscapeSequence", 
		"UnicodeEscapeSequence", "NumberLiteral", "HexLiteral", "OctalLiteral", 
		"BinaryLiteral", "DecimalLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "LANGL", "RANGL", "COLON", "COMMA", "AMP", "QUESTION", 
		"BAR", "SPREAD", "DOT", "QUOTE", "WS", "KEYOF", "INFER", "IN", "AS", "EXTENDS", 
		"EXTENDS_Q", "IN_Q", "IF", "NEVER", "NULL", "UNDEFINED", "UNKNOWN", "OBJECT", 
		"ANY", "STRING", "NUMBER", "BOOLEAN", "Identifier",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TypeSchemeLexer._LITERAL_NAMES, TypeSchemeLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TypeSchemeLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TypeSchemeLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TypeSchemeLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return TypeSchemeLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TypeSchemeLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TypeSchemeLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TypeSchemeLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x021\u0164\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02k\n\x02\x03\x03\x03" +
		"\x03\x03\x03\x05\x03p\n\x03\x03\x04\x03\x04\x03\x04\x07\x04u\n\x04\f\x04" +
		"\x0E\x04x\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x07\x05\x7F\n" +
		"\x05\f\x05\x0E\x05\x82\v\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x07" +
		"\x06\x89\n\x06\f\x06\x0E\x06\x8C\v\x06\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\x07\x05\x07\x93\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03" +
		"\t\x03\t\x03\t\x05\t\x9F\n\t\x03\n\x03\n\x03\n\x06\n\xA4\n\n\r\n\x0E\n" +
		"\xA5\x03\v\x03\v\x03\v\x06\v\xAB\n\v\r\v\x0E\v\xAC\x03\f\x03\f\x03\f\x06" +
		"\f\xB2\n\f\r\f\x0E\f\xB3\x03\r\x06\r\xB7\n\r\r\r\x0E\r\xB8\x03\r\x03\r" +
		"\x06\r\xBD\n\r\r\r\x0E\r\xBE\x05\r\xC1\n\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x06\x1E\xE6\n\x1E\r\x1E\x0E\x1E\xE7" +
		"\x03\x1E\x05\x1E\xEB\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03" +
		"#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x03$\x03$\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'" +
		"\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03+\x03+\x03" +
		"+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03" +
		"-\x03-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x03/\x03/\x030\x030\x070\u0157\n0\f0\x0E0\u015A\v0\x030\x050\u015D\n" +
		"0\x030\x030\x030\x030\x050\u0163\n0\x02\x02\x021\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02" +
		"\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-" +
		"Y\x02.[\x02/]\x020_\x021\x03\x02\r\x07\x02\f\f\x0F\x0F$$))^^\n\x02$$1" +
		"1^^ddhhppttvv\x04\x02ZZzz\x05\x022;CHch\x04\x02QQqq\x03\x022;\x04\x02" +
		"DDdd\x03\x0223\x05\x02\v\f\x0F\x0F\"\"\x06\x02&&C\\aac|\x07\x02&&2;C\\" +
		"aac|\x02\u017C\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x03j\x03\x02\x02\x02\x05o\x03" +
		"\x02\x02\x02\x07q\x03\x02\x02\x02\t{\x03\x02\x02\x02\v\x85\x03\x02\x02" +
		"\x02\r\x8F\x03\x02\x02\x02\x0F\x94\x03\x02\x02\x02\x11\x9E\x03\x02\x02" +
		"\x02\x13\xA0\x03\x02\x02\x02\x15\xA7\x03\x02\x02\x02\x17\xAE\x03\x02\x02" +
		"\x02\x19\xB6\x03\x02\x02\x02\x1B\xC2\x03\x02\x02\x02\x1D\xC4\x03\x02\x02" +
		"\x02\x1F\xC6\x03\x02\x02\x02!\xC8\x03\x02\x02\x02#\xCA\x03\x02\x02\x02" +
		"%\xCC\x03\x02\x02\x02\'\xCE\x03\x02\x02\x02)\xD0\x03\x02\x02\x02+\xD2" +
		"\x03\x02\x02\x02-\xD4\x03\x02\x02\x02/\xD6\x03\x02\x02\x021\xD8\x03\x02" +
		"\x02\x023\xDA\x03\x02\x02\x025\xDC\x03\x02\x02\x027\xE0\x03\x02\x02\x02" +
		"9\xE2\x03\x02\x02\x02;\xEA\x03\x02\x02\x02=\xEC\x03\x02\x02\x02?\xF2\x03" +
		"\x02\x02\x02A\xF8\x03\x02\x02\x02C\xFB\x03\x02\x02\x02E\xFE\x03\x02\x02" +
		"\x02G\u0106\x03\x02\x02\x02I\u010F\x03\x02\x02\x02K\u0113\x03\x02\x02" +
		"\x02M\u0116\x03\x02\x02\x02O\u011C\x03\x02\x02\x02Q\u0121\x03\x02\x02" +
		"\x02S\u012B\x03\x02\x02\x02U\u0133\x03\x02\x02\x02W\u013A\x03\x02\x02" +
		"\x02Y\u013E\x03\x02\x02\x02[\u0145\x03\x02\x02\x02]\u014C\x03\x02\x02" +
		"\x02_\u0162\x03\x02\x02\x02ab\x07v\x02\x02bc\x07t\x02\x02cd\x07w\x02\x02" +
		"dk\x07g\x02\x02ef\x07h\x02\x02fg\x07c\x02\x02gh\x07n\x02\x02hi\x07u\x02" +
		"\x02ik\x07g\x02\x02ja\x03\x02\x02\x02je\x03\x02\x02\x02k\x04\x03\x02\x02" +
		"\x02lp\x05\x07\x04\x02mp\x05\t\x05\x02np\x05\v\x06\x02ol\x03\x02\x02\x02" +
		"om\x03\x02\x02\x02on\x03\x02\x02\x02p\x06\x03\x02\x02\x02qv\x059\x1D\x02" +
		"ru\x05\r\x07\x02su\n\x02\x02\x02tr\x03\x02\x02\x02ts\x03\x02\x02\x02u" +
		"x\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03\x02\x02\x02" +
		"xv\x03\x02\x02\x02yz\x059\x1D\x02z\b\x03\x02\x02\x02{\x80\x07$\x02\x02" +
		"|\x7F\x05\r\x07\x02}\x7F\n\x02\x02\x02~|\x03\x02\x02\x02~}\x03\x02\x02" +
		"\x02\x7F\x82\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02\x02" +
		"\x02\x81\x83\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x83\x84\x07$\x02" +
		"\x02\x84\n\x03\x02\x02\x02\x85\x8A\x07b\x02\x02\x86\x89\x05\r\x07\x02" +
		"\x87\x89\n\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x87\x03\x02\x02\x02" +
		"\x89\x8C\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02" +
		"\x8B\x8D\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8D\x8E\x07b\x02\x02" +
		"\x8E\f\x03\x02\x02\x02\x8F\x92\x07^\x02\x02\x90\x93\t\x03\x02\x02\x91" +
		"\x93\x05\x0F\b\x02\x92\x90\x03\x02\x02\x02\x92\x91\x03\x02\x02\x02\x93" +
		"\x0E\x03\x02\x02\x02\x94\x95\x07w\x02\x02\x95\x96\x05\x13\n\x02\x96\x97" +
		"\x05\x13\n\x02\x97\x98\x05\x13\n\x02\x98\x99\x05\x13\n\x02\x99\x10\x03" +
		"\x02\x02\x02\x9A\x9F\x05\x19\r\x02\x9B\x9F\x05\x13\n\x02\x9C\x9F\x05\x15" +
		"\v\x02\x9D\x9F\x05\x17\f\x02\x9E\x9A\x03\x02\x02\x02\x9E\x9B\x03\x02\x02" +
		"\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9D\x03\x02\x02\x02\x9F\x12\x03\x02\x02" +
		"\x02\xA0\xA1\x072\x02\x02\xA1\xA3\t\x04\x02\x02\xA2\xA4\t\x05\x02\x02" +
		"\xA3\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA3\x03\x02\x02\x02" +
		"\xA5\xA6\x03\x02\x02\x02\xA6\x14\x03\x02\x02\x02\xA7\xA8\x072\x02\x02" +
		"\xA8\xAA\t\x06\x02\x02\xA9\xAB\t\x07\x02\x02\xAA\xA9\x03\x02\x02\x02\xAB" +
		"\xAC\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD" +
		"\x16\x03\x02\x02\x02\xAE\xAF\x072\x02\x02\xAF\xB1\t\b\x02\x02\xB0\xB2" +
		"\t\t\x02\x02\xB1\xB0\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB1\x03" +
		"\x02\x02\x02\xB3\xB4\x03\x02\x02\x02\xB4\x18\x03\x02\x02\x02\xB5\xB7\t" +
		"\x07\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8\xB6\x03" +
		"\x02\x02\x02\xB8\xB9\x03\x02\x02\x02\xB9\xC0\x03\x02\x02\x02\xBA\xBC\x07" +
		"0\x02\x02\xBB\xBD\t\x07\x02\x02\xBC\xBB\x03\x02\x02\x02\xBD\xBE\x03\x02" +
		"\x02\x02\xBE\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF\xC1\x03\x02" +
		"\x02\x02\xC0\xBA\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\x1A\x03\x02" +
		"\x02\x02\xC2\xC3\x07*\x02\x02\xC3\x1C\x03\x02\x02\x02\xC4\xC5\x07+\x02" +
		"\x02\xC5\x1E\x03\x02\x02\x02\xC6\xC7\x07}\x02\x02\xC7 \x03\x02\x02\x02" +
		"\xC8\xC9\x07\x7F\x02\x02\xC9\"\x03\x02\x02\x02\xCA\xCB\x07]\x02\x02\xCB" +
		"$\x03\x02\x02\x02\xCC\xCD\x07_\x02\x02\xCD&\x03\x02\x02\x02\xCE\xCF\x07" +
		">\x02\x02\xCF(\x03\x02\x02\x02\xD0\xD1\x07@\x02\x02\xD1*\x03\x02\x02\x02" +
		"\xD2\xD3\x07<\x02\x02\xD3,\x03\x02\x02\x02\xD4\xD5\x07.\x02\x02\xD5.\x03" +
		"\x02\x02\x02\xD6\xD7\x07(\x02\x02\xD70\x03\x02\x02\x02\xD8\xD9\x07A\x02" +
		"\x02\xD92\x03\x02\x02\x02\xDA\xDB\x07~\x02\x02\xDB4\x03\x02\x02\x02\xDC" +
		"\xDD\x070\x02\x02\xDD\xDE\x070\x02\x02\xDE\xDF\x070\x02\x02\xDF6\x03\x02" +
		"\x02\x02\xE0\xE1\x070\x02\x02\xE18\x03\x02\x02\x02\xE2\xE3\x07)\x02\x02" +
		"\xE3:\x03\x02\x02\x02\xE4\xE6\t\n\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6" +
		"\xE7\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8" +
		"\xEB\x03\x02\x02\x02\xE9\xEB\x07\x02\x02\x03\xEA\xE5\x03\x02\x02\x02\xEA" +
		"\xE9\x03\x02\x02\x02\xEB<\x03\x02\x02\x02\xEC\xED\x07m\x02\x02\xED\xEE" +
		"\x07g\x02\x02\xEE\xEF\x07{\x02\x02\xEF\xF0\x07q\x02\x02\xF0\xF1\x07h\x02" +
		"\x02\xF1>\x03\x02\x02\x02\xF2\xF3\x07k\x02\x02\xF3\xF4\x07p\x02\x02\xF4" +
		"\xF5\x07h\x02\x02\xF5\xF6\x07g\x02\x02\xF6\xF7\x07t\x02\x02\xF7@\x03\x02" +
		"\x02\x02\xF8\xF9\x07k\x02\x02\xF9\xFA\x07p\x02\x02\xFAB\x03\x02\x02\x02" +
		"\xFB\xFC\x07c\x02\x02\xFC\xFD\x07u\x02\x02\xFDD\x03\x02\x02\x02\xFE\xFF" +
		"\x07g\x02\x02\xFF\u0100\x07z\x02\x02\u0100\u0101\x07v\x02\x02\u0101\u0102" +
		"\x07g\x02\x02\u0102\u0103\x07p\x02\x02\u0103\u0104\x07f\x02\x02\u0104" +
		"\u0105\x07u\x02\x02\u0105F\x03\x02\x02\x02\u0106\u0107\x07g\x02\x02\u0107" +
		"\u0108\x07z\x02\x02\u0108\u0109\x07v\x02\x02\u0109\u010A\x07g\x02\x02" +
		"\u010A\u010B\x07p\x02\x02\u010B\u010C\x07f\x02\x02\u010C\u010D\x07u\x02" +
		"\x02\u010D\u010E\x07A\x02\x02\u010EH\x03\x02\x02\x02\u010F\u0110\x07k" +
		"\x02\x02\u0110\u0111\x07p\x02\x02\u0111\u0112\x07A\x02\x02\u0112J\x03" +
		"\x02\x02\x02\u0113\u0114\x07k\x02\x02\u0114\u0115\x07h\x02\x02\u0115L" +
		"\x03\x02\x02\x02\u0116\u0117\x07p\x02\x02\u0117\u0118\x07g\x02\x02\u0118" +
		"\u0119\x07x\x02\x02\u0119\u011A\x07g\x02\x02\u011A\u011B\x07t\x02\x02" +
		"\u011BN\x03\x02\x02\x02\u011C\u011D\x07p\x02\x02\u011D\u011E\x07w\x02" +
		"\x02\u011E\u011F\x07n\x02\x02\u011F\u0120\x07n\x02\x02\u0120P\x03\x02" +
		"\x02\x02\u0121\u0122\x07w\x02\x02\u0122\u0123\x07p\x02\x02\u0123\u0124" +
		"\x07f\x02\x02\u0124\u0125\x07g\x02\x02\u0125\u0126\x07h\x02\x02\u0126" +
		"\u0127\x07k\x02\x02\u0127\u0128\x07p\x02\x02\u0128\u0129\x07g\x02\x02" +
		"\u0129\u012A\x07f\x02\x02\u012AR\x03\x02\x02\x02\u012B\u012C\x07w\x02" +
		"\x02\u012C\u012D\x07p\x02\x02\u012D\u012E\x07m\x02\x02\u012E\u012F\x07" +
		"p\x02\x02\u012F\u0130\x07q\x02\x02\u0130\u0131\x07y\x02\x02\u0131\u0132" +
		"\x07p\x02\x02\u0132T\x03\x02\x02\x02\u0133\u0134\x07q\x02\x02\u0134\u0135" +
		"\x07d\x02\x02\u0135\u0136\x07l\x02\x02\u0136\u0137\x07g\x02\x02\u0137" +
		"\u0138\x07e\x02\x02\u0138\u0139\x07v\x02\x02\u0139V\x03\x02\x02\x02\u013A" +
		"\u013B\x07c\x02\x02\u013B\u013C\x07p\x02\x02\u013C\u013D\x07{\x02\x02" +
		"\u013DX\x03\x02\x02\x02\u013E\u013F\x07u\x02\x02\u013F\u0140\x07v\x02" +
		"\x02\u0140\u0141\x07t\x02\x02\u0141\u0142\x07k\x02\x02\u0142\u0143\x07" +
		"p\x02\x02\u0143\u0144\x07i\x02\x02\u0144Z\x03\x02\x02\x02\u0145\u0146" +
		"\x07p\x02\x02\u0146\u0147\x07w\x02\x02\u0147\u0148\x07o\x02\x02\u0148" +
		"\u0149\x07d\x02\x02\u0149\u014A\x07g\x02\x02\u014A\u014B\x07t\x02\x02" +
		"\u014B\\\x03\x02\x02\x02\u014C\u014D\x07d\x02\x02\u014D\u014E\x07q\x02" +
		"\x02\u014E\u014F\x07q\x02\x02\u014F\u0150\x07n\x02\x02\u0150\u0151\x07" +
		"g\x02\x02\u0151\u0152\x07c\x02\x02\u0152\u0153\x07p\x02\x02\u0153^\x03" +
		"\x02\x02\x02\u0154\u0158\t\v\x02\x02\u0155\u0157\t\f\x02\x02\u0156\u0155" +
		"\x03\x02\x02\x02\u0157\u015A\x03\x02\x02\x02\u0158\u0156\x03\x02\x02\x02" +
		"\u0158\u0159\x03\x02\x02\x02\u0159\u015C\x03\x02\x02\x02\u015A\u0158\x03" +
		"\x02\x02\x02\u015B\u015D\x07A\x02\x02\u015C\u015B\x03\x02\x02\x02\u015C" +
		"\u015D\x03\x02\x02\x02\u015D\u0163\x03\x02\x02\x02\u015E\u015F\x07?\x02" +
		"\x02\u015F\u0163\x07A\x02\x02\u0160\u0161\x07A\x02\x02\u0161\u0163\x07" +
		"?\x02\x02\u0162\u0154\x03\x02\x02\x02\u0162\u015E\x03\x02\x02\x02\u0162" +
		"\u0160\x03\x02\x02\x02\u0163`\x03\x02\x02\x02\x18\x02jotv~\x80\x88\x8A" +
		"\x92\x9E\xA5\xAC\xB3\xB8\xBE\xC0\xE7\xEA\u0158\u015C\u0162\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TypeSchemeLexer.__ATN) {
			TypeSchemeLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TypeSchemeLexer._serializedATN));
		}

		return TypeSchemeLexer.__ATN;
	}

}

